{"version":3,"names":["accordionIosCss","accordionMdCss","Accordion","constructor","hostRef","this","updateListener","updateState","state","isNext","isPrevious","value","accordionIds","disabled","readonly","toggleIcon","chevronDown","toggleIconSlot","setItemDefaults","ionItem","getSlottedHeaderIonItem","button","detail","lines","undefined","headerEl","slot","querySelector","assignedElements","find","el","tagName","setAria","expanded","root","getElementRoot","setAttribute","slotToggleIcon","existingToggleIcon","iconEl","document","createElement","lazy","classList","add","icon","appendChild","expandAccordion","initialUpdate","contentEl","contentElWrapper","currentRaf","cancelAnimationFrame","shouldAnimate","raf","async","contentHeight","offsetHeight","waitForTransition","transitionEndAsync","style","setProperty","removeProperty","collapseAccordion","window","prefersReducedMotion","matchMedia","matches","animated","config","get","accordionGroupEl","accordionGroup","accordionValue","shouldExpand","Array","isArray","includes","nextAccordion","getNextSibling","nextAccordionValue","previousAccordion","getPreviousSibling","previousAccordionValue","nextSibling","nextElementSibling","previousSibling","previousElementSibling","connectedCallback","_a","closest","addEventListener","disconnectedCallback","removeEventListener","componentDidLoad","toggleExpanded","expand","requestAccordionToggle","render","mode","getIonMode","headerPart","contentPart","h","Host","class","getBoolean","onClick","id","part","ref","name","role","delegatesFocus"],"sources":["./node_modules/@ionic/core/dist/collection/components/accordion/accordion.ios.css?tag=ion-accordion&mode=ios&encapsulation=shadow","./node_modules/@ionic/core/dist/collection/components/accordion/accordion.md.css?tag=ion-accordion&mode=md&encapsulation=shadow","./node_modules/@ionic/core/dist/collection/components/accordion/accordion.js"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  width: 100%;\n  background-color: var(--ion-background-color, #ffffff);\n  overflow: hidden;\n  /**\n   * This is required to force WebKit\n   * to create a new stacking context\n   * otherwise the border radius is\n   * temporarily lost when hovering over\n   * the ion-item or expanding/collapsing\n   * the accordion.\n   */\n  z-index: 0;\n}\n\n:host(.accordion-expanding) ::slotted(ion-item[slot=header]),\n:host(.accordion-expanded) ::slotted(ion-item[slot=header]) {\n  --border-width: 0px;\n}\n\n:host(.accordion-animated) {\n  transition: all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n:host(.accordion-animated) #content {\n  transition: max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n#content {\n  overflow: hidden;\n  will-change: max-height;\n}\n\n:host(.accordion-collapsing) #content {\n  /* stylelint-disable-next-line declaration-no-important */\n  max-height: 0 !important;\n}\n\n:host(.accordion-collapsed) #content {\n  display: none;\n}\n\n:host(.accordion-expanding) #content {\n  max-height: 0;\n}\n\n:host(.accordion-disabled) #header,\n:host(.accordion-readonly) #header,\n:host(.accordion-disabled) #content,\n:host(.accordion-readonly) #content {\n  pointer-events: none;\n}\n\n/**\n * We do not set the opacity on the\n * host otherwise you would see the\n * box-shadow behind it.\n */\n:host(.accordion-disabled) #header,\n:host(.accordion-disabled) #content {\n  opacity: 0.4;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :host,\n#content {\n    /* stylelint-disable declaration-no-important */\n    transition: none !important;\n  }\n}\n:host(.accordion-next) ::slotted(ion-item[slot=header]) {\n  --border-width: 0.55px 0px 0.55px 0px;\n}",":host {\n  display: block;\n  position: relative;\n  width: 100%;\n  background-color: var(--ion-background-color, #ffffff);\n  overflow: hidden;\n  /**\n   * This is required to force WebKit\n   * to create a new stacking context\n   * otherwise the border radius is\n   * temporarily lost when hovering over\n   * the ion-item or expanding/collapsing\n   * the accordion.\n   */\n  z-index: 0;\n}\n\n:host(.accordion-expanding) ::slotted(ion-item[slot=header]),\n:host(.accordion-expanded) ::slotted(ion-item[slot=header]) {\n  --border-width: 0px;\n}\n\n:host(.accordion-animated) {\n  transition: all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n:host(.accordion-animated) #content {\n  transition: max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n#content {\n  overflow: hidden;\n  will-change: max-height;\n}\n\n:host(.accordion-collapsing) #content {\n  /* stylelint-disable-next-line declaration-no-important */\n  max-height: 0 !important;\n}\n\n:host(.accordion-collapsed) #content {\n  display: none;\n}\n\n:host(.accordion-expanding) #content {\n  max-height: 0;\n}\n\n:host(.accordion-disabled) #header,\n:host(.accordion-readonly) #header,\n:host(.accordion-disabled) #content,\n:host(.accordion-readonly) #content {\n  pointer-events: none;\n}\n\n/**\n * We do not set the opacity on the\n * host otherwise you would see the\n * box-shadow behind it.\n */\n:host(.accordion-disabled) #header,\n:host(.accordion-disabled) #content {\n  opacity: 0.4;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :host,\n#content {\n    /* stylelint-disable declaration-no-important */\n    transition: none !important;\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { chevronDown } from 'ionicons/icons';\nimport { config } from '../../global/config';\nimport { getIonMode } from '../../global/ionic-global';\nimport { addEventListener, getElementRoot, raf, removeEventListener, transitionEndAsync } from '../../utils/helpers';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot header - Content is placed at the top and is used to\n * expand or collapse the accordion item.\n * @slot content - Content is placed below the header and is\n * shown or hidden based on expanded state.\n *\n * @part header - The wrapper element for the header slot.\n * @part content - The wrapper element for the content slot.\n * @part expanded - The expanded element. Can be used in combination\n * with the `header` and `content` parts (i.e. `::part(header expanded)`).\n */\nexport class Accordion {\n  constructor() {\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* AccordionState.Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const { headerEl } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      if (slot.assignedElements === undefined)\n        return;\n      return slot.assignedElements().find((el) => el.tagName === 'ION-ITEM');\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const { toggleIconSlot, toggleIcon } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      const { contentEl, contentElWrapper } = this;\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        this.state = 4 /* AccordionState.Expanded */;\n        return;\n      }\n      if (this.state === 4 /* AccordionState.Expanded */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* AccordionState.Expanding */;\n          this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            this.state = 4 /* AccordionState.Expanded */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 4 /* AccordionState.Expanded */;\n      }\n    };\n    this.collapseAccordion = (initialUpdate = false) => {\n      const { contentEl } = this;\n      if (initialUpdate || contentEl === undefined) {\n        this.state = 1 /* AccordionState.Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* AccordionState.Collapsed */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            this.state = 2 /* AccordionState.Collapsing */;\n            await waitForTransition;\n            this.state = 1 /* AccordionState.Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 1 /* AccordionState.Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = async (initialUpdate = false) => {\n      const accordionGroup = this.accordionGroupEl;\n      const accordionValue = this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        this.expandAccordion(initialUpdate);\n        this.isNext = this.isPrevious = false;\n      }\n      else {\n        this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = (this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group'));\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const { accordionGroupEl, value, state } = this;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const { disabled, readonly } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return (h(Host, { class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true),\n      } }, h(\"div\", { onClick: () => this.toggleExpanded(), id: \"header\", part: headerPart, \"aria-controls\": \"content\", ref: (headerEl) => (this.headerEl = headerEl) }, h(\"slot\", { name: \"header\" })), h(\"div\", { id: \"content\", part: contentPart, role: \"region\", \"aria-labelledby\": \"header\", ref: (contentEl) => (this.contentEl = contentEl) }, h(\"div\", { id: \"content-wrapper\", ref: (contentElWrapper) => (this.contentElWrapper = contentElWrapper) }, h(\"slot\", { name: \"content\" })))));\n  }\n  static get is() { return \"ion-accordion\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get delegatesFocus() { return true; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"accordion.ios.scss\"],\n      \"md\": [\"accordion.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"accordion.ios.css\"],\n      \"md\": [\"accordion.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The value of the accordion. Defaults to an autogenerated\\nvalue.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"`ion-accordion-${accordionIds++}`\"\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the accordion cannot be interacted with.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"readonly\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the accordion cannot be interacted with,\\nbut does not alter the opacity.\"\n        },\n        \"attribute\": \"readonly\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"toggleIcon\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The toggle icon to use. This icon will be\\nrotated when the accordion is expanded\\nor collapsed.\"\n        },\n        \"attribute\": \"toggle-icon\",\n        \"reflect\": false,\n        \"defaultValue\": \"chevronDown\"\n      },\n      \"toggleIconSlot\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'start' | 'end'\",\n          \"resolved\": \"\\\"end\\\" | \\\"start\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The slot inside of `ion-item` to\\nplace the toggle icon. Defaults to `'end'`.\"\n        },\n        \"attribute\": \"toggle-icon-slot\",\n        \"reflect\": false,\n        \"defaultValue\": \"'end'\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"state\": {},\n      \"isNext\": {},\n      \"isPrevious\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\nlet accordionIds = 0;\n"],"mappings":"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"}