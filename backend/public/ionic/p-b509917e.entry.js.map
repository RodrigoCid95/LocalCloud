{"version":3,"names":["itemSlidingCss","SWIPE_MARGIN","ELASTIC_FACTOR","openSlidingItem","ItemSliding","constructor","hostRef","this","item","openAmount","initialOpenAmount","optsWidthRightSide","optsWidthLeftSide","sides","optsDirty","contentEl","initialContentScrollY","state","disabled","disabledChanged","gesture","enable","async","el","querySelector","findClosestIonContent","updateOptions","import","createGesture","gestureName","gesturePriority","threshold","canStart","ev","onStart","onMove","onEnd","disconnectedCallback","destroy","undefined","leftOptions","rightOptions","getOpenAmount","Promise","resolve","getSlidingRatio","getSlidingRatioSync","side","optionsToOpen","getOptions","isEndSide","isStartOpen","isEndOpen","closeOpened","requestAnimationFrame","calculateOptsWidth","width","setOpenAmount","close","options","querySelectorAll","i","length","option","componentOnReady","rtl","document","dir","atEdge","window","innerWidth","startX","selected","disableContentScrollY","tmr","clearTimeout","style","transition","deltaX","Math","max","min","console","warn","optsWidth","resetContentScrollY","velocity","velocityX","restingPoint","isResetDirection","isMovingFast","abs","isOnCloseZone","swipeShouldReset","fireSwipeEvent","display","offsetWidth","isFinal","setTimeout","transform","ionDrag","emit","amount","ratio","render","mode","getIonMode","h","Host","class","isOnResetZone"],"sources":["./node_modules/@ionic/core/dist/collection/components/item-sliding/item-sliding.css?tag=ion-item-sliding","./node_modules/@ionic/core/dist/collection/components/item-sliding/item-sliding.js"],"sourcesContent":["ion-item-sliding {\n  display: block;\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  user-select: none;\n}\n\nion-item-sliding .item {\n  user-select: none;\n}\n\n.item-sliding-active-slide .item {\n  position: relative;\n  transition: transform 500ms cubic-bezier(0.36, 0.66, 0.04, 1);\n  opacity: 1;\n  z-index: 2;\n  pointer-events: none;\n  will-change: transform;\n}\n\n.item-sliding-active-swipe-end .item-options-end .item-option-expandable {\n  /* stylelint-disable-next-line property-disallowed-list */\n  padding-left: 100%;\n  order: 1;\n  transition-duration: 0.6s;\n  transition-property: padding-left;\n}\n[dir=rtl] .item-sliding-active-swipe-end .item-options-end .item-option-expandable, :host-context([dir=rtl]) .item-sliding-active-swipe-end .item-options-end .item-option-expandable {\n  order: -1;\n}\n\n.item-sliding-active-swipe-start .item-options-start .item-option-expandable {\n  /* stylelint-disable-next-line property-disallowed-list */\n  padding-right: 100%;\n  order: -1;\n  transition-duration: 0.6s;\n  transition-property: padding-right;\n}\n[dir=rtl] .item-sliding-active-swipe-start .item-options-start .item-option-expandable, :host-context([dir=rtl]) .item-sliding-active-swipe-start .item-options-start .item-option-expandable {\n  order: 1;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { findClosestIonContent, disableContentScrollY, resetContentScrollY } from '../../utils/content';\nimport { isEndSide } from '../../utils/helpers';\nconst SWIPE_MARGIN = 30;\nconst ELASTIC_FACTOR = 0.55;\nlet openSlidingItem;\nexport class ItemSliding {\n  constructor() {\n    this.item = null;\n    this.openAmount = 0;\n    this.initialOpenAmount = 0;\n    this.optsWidthRightSide = 0;\n    this.optsWidthLeftSide = 0;\n    this.sides = 0 /* ItemSide.None */;\n    this.optsDirty = true;\n    this.contentEl = null;\n    this.initialContentScrollY = true;\n    this.state = 2 /* SlidingState.Disabled */;\n    /**\n     * If `true`, the user cannot interact with the sliding item.\n     */\n    this.disabled = false;\n  }\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  async connectedCallback() {\n    this.item = this.el.querySelector('ion-item');\n    this.contentEl = findClosestIonContent(this.el);\n    await this.updateOptions();\n    this.gesture = (await import('../../utils/gesture')).createGesture({\n      el: this.el,\n      gestureName: 'item-swipe',\n      gesturePriority: 100,\n      threshold: 5,\n      canStart: (ev) => this.canStart(ev),\n      onStart: () => this.onStart(),\n      onMove: (ev) => this.onMove(ev),\n      onEnd: (ev) => this.onEnd(ev),\n    });\n    this.disabledChanged();\n  }\n  disconnectedCallback() {\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.item = null;\n    this.leftOptions = this.rightOptions = undefined;\n    if (openSlidingItem === this.el) {\n      openSlidingItem = undefined;\n    }\n  }\n  /**\n   * Get the amount the item is open in pixels.\n   */\n  getOpenAmount() {\n    return Promise.resolve(this.openAmount);\n  }\n  /**\n   * Get the ratio of the open amount of the item compared to the width of the options.\n   * If the number returned is positive, then the options on the right side are open.\n   * If the number returned is negative, then the options on the left side are open.\n   * If the absolute value of the number is greater than 1, the item is open more than\n   * the width of the options.\n   */\n  getSlidingRatio() {\n    return Promise.resolve(this.getSlidingRatioSync());\n  }\n  /**\n   * Open the sliding item.\n   *\n   * @param side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\n   */\n  async open(side) {\n    if (this.item === null) {\n      return;\n    }\n    const optionsToOpen = this.getOptions(side);\n    if (!optionsToOpen) {\n      return;\n    }\n    /**\n     * If side is not set, we need to infer the side\n     * so we know which direction to move the options\n     */\n    if (side === undefined) {\n      side = optionsToOpen === this.leftOptions ? 'start' : 'end';\n    }\n    // In RTL we want to switch the sides\n    side = isEndSide(side) ? 'end' : 'start';\n    const isStartOpen = this.openAmount < 0;\n    const isEndOpen = this.openAmount > 0;\n    /**\n     * If a side is open and a user tries to\n     * re-open the same side, we should not do anything\n     */\n    if (isStartOpen && optionsToOpen === this.leftOptions) {\n      return;\n    }\n    if (isEndOpen && optionsToOpen === this.rightOptions) {\n      return;\n    }\n    this.closeOpened();\n    this.state = 4 /* SlidingState.Enabled */;\n    requestAnimationFrame(() => {\n      this.calculateOptsWidth();\n      const width = side === 'end' ? this.optsWidthRightSide : -this.optsWidthLeftSide;\n      openSlidingItem = this.el;\n      this.setOpenAmount(width, false);\n      this.state = side === 'end' ? 8 /* SlidingState.End */ : 16 /* SlidingState.Start */;\n    });\n  }\n  /**\n   * Close the sliding item. Items can also be closed from the [List](./list).\n   */\n  async close() {\n    this.setOpenAmount(0, true);\n  }\n  /**\n   * Close all of the sliding items in the list. Items can also be closed from the [List](./list).\n   */\n  async closeOpened() {\n    if (openSlidingItem !== undefined) {\n      openSlidingItem.close();\n      openSlidingItem = undefined;\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Given an optional side, return the ion-item-options element.\n   *\n   * @param side This side of the options to get. If a side is not provided it will\n   * return the first one available.\n   */\n  getOptions(side) {\n    if (side === undefined) {\n      return this.leftOptions || this.rightOptions;\n    }\n    else if (side === 'start') {\n      return this.leftOptions;\n    }\n    else {\n      return this.rightOptions;\n    }\n  }\n  async updateOptions() {\n    const options = this.el.querySelectorAll('ion-item-options');\n    let sides = 0;\n    // Reset left and right options in case they were removed\n    this.leftOptions = this.rightOptions = undefined;\n    for (let i = 0; i < options.length; i++) {\n      const item = options.item(i);\n      /**\n       * We cannot use the componentOnReady helper\n       * util here since we need to wait for all of these items\n       * to be ready before we set `this.sides` and `this.optsDirty`.\n       */\n      // eslint-disable-next-line custom-rules/no-component-on-ready-method\n      const option = item.componentOnReady !== undefined ? await item.componentOnReady() : item;\n      const side = isEndSide(option.side) ? 'end' : 'start';\n      if (side === 'start') {\n        this.leftOptions = option;\n        sides |= 1 /* ItemSide.Start */;\n      }\n      else {\n        this.rightOptions = option;\n        sides |= 2 /* ItemSide.End */;\n      }\n    }\n    this.optsDirty = true;\n    this.sides = sides;\n  }\n  canStart(gesture) {\n    /**\n     * If very close to start of the screen\n     * do not open left side so swipe to go\n     * back will still work.\n     */\n    const rtl = document.dir === 'rtl';\n    const atEdge = rtl ? window.innerWidth - gesture.startX < 15 : gesture.startX < 15;\n    if (atEdge) {\n      return false;\n    }\n    const selected = openSlidingItem;\n    if (selected && selected !== this.el) {\n      this.closeOpened();\n    }\n    return !!(this.rightOptions || this.leftOptions);\n  }\n  onStart() {\n    /**\n     * We need to query for the ion-item\n     * every time the gesture starts. Developers\n     * may toggle ion-item elements via *ngIf.\n     */\n    this.item = this.el.querySelector('ion-item');\n    const { contentEl } = this;\n    if (contentEl) {\n      this.initialContentScrollY = disableContentScrollY(contentEl);\n    }\n    openSlidingItem = this.el;\n    if (this.tmr !== undefined) {\n      clearTimeout(this.tmr);\n      this.tmr = undefined;\n    }\n    if (this.openAmount === 0) {\n      this.optsDirty = true;\n      this.state = 4 /* SlidingState.Enabled */;\n    }\n    this.initialOpenAmount = this.openAmount;\n    if (this.item) {\n      this.item.style.transition = 'none';\n    }\n  }\n  onMove(gesture) {\n    if (this.optsDirty) {\n      this.calculateOptsWidth();\n    }\n    let openAmount = this.initialOpenAmount - gesture.deltaX;\n    switch (this.sides) {\n      case 2 /* ItemSide.End */:\n        openAmount = Math.max(0, openAmount);\n        break;\n      case 1 /* ItemSide.Start */:\n        openAmount = Math.min(0, openAmount);\n        break;\n      case 3 /* ItemSide.Both */:\n        break;\n      case 0 /* ItemSide.None */:\n        return;\n      default:\n        console.warn('invalid ItemSideFlags value', this.sides);\n        break;\n    }\n    let optsWidth;\n    if (openAmount > this.optsWidthRightSide) {\n      optsWidth = this.optsWidthRightSide;\n      openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;\n    }\n    else if (openAmount < -this.optsWidthLeftSide) {\n      optsWidth = -this.optsWidthLeftSide;\n      openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;\n    }\n    this.setOpenAmount(openAmount, false);\n  }\n  onEnd(gesture) {\n    const { contentEl, initialContentScrollY } = this;\n    if (contentEl) {\n      resetContentScrollY(contentEl, initialContentScrollY);\n    }\n    const velocity = gesture.velocityX;\n    let restingPoint = this.openAmount > 0 ? this.optsWidthRightSide : -this.optsWidthLeftSide;\n    // Check if the drag didn't clear the buttons mid-point\n    // and we aren't moving fast enough to swipe open\n    const isResetDirection = this.openAmount > 0 === !(velocity < 0);\n    const isMovingFast = Math.abs(velocity) > 0.3;\n    const isOnCloseZone = Math.abs(this.openAmount) < Math.abs(restingPoint / 2);\n    if (swipeShouldReset(isResetDirection, isMovingFast, isOnCloseZone)) {\n      restingPoint = 0;\n    }\n    const state = this.state;\n    this.setOpenAmount(restingPoint, true);\n    if ((state & 32 /* SlidingState.SwipeEnd */) !== 0 && this.rightOptions) {\n      this.rightOptions.fireSwipeEvent();\n    }\n    else if ((state & 64 /* SlidingState.SwipeStart */) !== 0 && this.leftOptions) {\n      this.leftOptions.fireSwipeEvent();\n    }\n  }\n  calculateOptsWidth() {\n    this.optsWidthRightSide = 0;\n    if (this.rightOptions) {\n      this.rightOptions.style.display = 'flex';\n      this.optsWidthRightSide = this.rightOptions.offsetWidth;\n      this.rightOptions.style.display = '';\n    }\n    this.optsWidthLeftSide = 0;\n    if (this.leftOptions) {\n      this.leftOptions.style.display = 'flex';\n      this.optsWidthLeftSide = this.leftOptions.offsetWidth;\n      this.leftOptions.style.display = '';\n    }\n    this.optsDirty = false;\n  }\n  setOpenAmount(openAmount, isFinal) {\n    if (this.tmr !== undefined) {\n      clearTimeout(this.tmr);\n      this.tmr = undefined;\n    }\n    if (!this.item) {\n      return;\n    }\n    const style = this.item.style;\n    this.openAmount = openAmount;\n    if (isFinal) {\n      style.transition = '';\n    }\n    if (openAmount > 0) {\n      this.state =\n        openAmount >= this.optsWidthRightSide + SWIPE_MARGIN\n          ? 8 /* SlidingState.End */ | 32 /* SlidingState.SwipeEnd */\n          : 8 /* SlidingState.End */;\n    }\n    else if (openAmount < 0) {\n      this.state =\n        openAmount <= -this.optsWidthLeftSide - SWIPE_MARGIN\n          ? 16 /* SlidingState.Start */ | 64 /* SlidingState.SwipeStart */\n          : 16 /* SlidingState.Start */;\n    }\n    else {\n      /**\n       * Item sliding cannot be interrupted\n       * while closing the item. If it did,\n       * it would allow the item to get into an\n       * inconsistent state where multiple\n       * items are then open at the same time.\n       */\n      if (this.gesture) {\n        this.gesture.enable(false);\n      }\n      this.tmr = setTimeout(() => {\n        this.state = 2 /* SlidingState.Disabled */;\n        this.tmr = undefined;\n        if (this.gesture) {\n          this.gesture.enable(!this.disabled);\n        }\n      }, 600);\n      openSlidingItem = undefined;\n      style.transform = '';\n      return;\n    }\n    style.transform = `translate3d(${-openAmount}px,0,0)`;\n    this.ionDrag.emit({\n      amount: openAmount,\n      ratio: this.getSlidingRatioSync(),\n    });\n  }\n  getSlidingRatioSync() {\n    if (this.openAmount > 0) {\n      return this.openAmount / this.optsWidthRightSide;\n    }\n    else if (this.openAmount < 0) {\n      return this.openAmount / this.optsWidthLeftSide;\n    }\n    else {\n      return 0;\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'item-sliding-active-slide': this.state !== 2 /* SlidingState.Disabled */,\n        'item-sliding-active-options-end': (this.state & 8 /* SlidingState.End */) !== 0,\n        'item-sliding-active-options-start': (this.state & 16 /* SlidingState.Start */) !== 0,\n        'item-sliding-active-swipe-end': (this.state & 32 /* SlidingState.SwipeEnd */) !== 0,\n        'item-sliding-active-swipe-start': (this.state & 64 /* SlidingState.SwipeStart */) !== 0,\n      } }));\n  }\n  static get is() { return \"ion-item-sliding\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"item-sliding.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"item-sliding.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the sliding item.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"state\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionDrag\",\n        \"name\": \"ionDrag\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the sliding position changes.\"\n        },\n        \"complexType\": {\n          \"original\": \"any\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"getOpenAmount\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<number>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<number>\"\n        },\n        \"docs\": {\n          \"text\": \"Get the amount the item is open in pixels.\",\n          \"tags\": []\n        }\n      },\n      \"getSlidingRatio\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<number>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<number>\"\n        },\n        \"docs\": {\n          \"text\": \"Get the ratio of the open amount of the item compared to the width of the options.\\nIf the number returned is positive, then the options on the right side are open.\\nIf the number returned is negative, then the options on the left side are open.\\nIf the absolute value of the number is greater than 1, the item is open more than\\nthe width of the options.\",\n          \"tags\": []\n        }\n      },\n      \"open\": {\n        \"complexType\": {\n          \"signature\": \"(side: Side | undefined) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\"\n                }],\n              \"text\": \"The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"Side\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Open the sliding item.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\"\n            }]\n        }\n      },\n      \"close\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Close the sliding item. Items can also be closed from the [List](./list).\",\n          \"tags\": []\n        }\n      },\n      \"closeOpened\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<boolean>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Close all of the sliding items in the list. Items can also be closed from the [List](./list).\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"disabled\",\n        \"methodName\": \"disabledChanged\"\n      }];\n  }\n}\nconst swipeShouldReset = (isResetDirection, isMovingFast, isOnResetZone) => {\n  // The logic required to know when the sliding item should close (openAmount=0)\n  // depends on three booleans (isResetDirection, isMovingFast, isOnResetZone)\n  // and it ended up being too complicated to be written manually without errors\n  // so the truth table is attached below: (0=false, 1=true)\n  // isResetDirection | isMovingFast | isOnResetZone || shouldClose\n  //         0        |       0      |       0       ||    0\n  //         0        |       0      |       1       ||    1\n  //         0        |       1      |       0       ||    0\n  //         0        |       1      |       1       ||    0\n  //         1        |       0      |       0       ||    0\n  //         1        |       0      |       1       ||    1\n  //         1        |       1      |       0       ||    1\n  //         1        |       1      |       1       ||    1\n  // The resulting expression was generated by resolving the K-map (Karnaugh map):\n  return (!isMovingFast && isOnResetZone) || (isResetDirection && isMovingFast);\n};\n"],"mappings":"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"}