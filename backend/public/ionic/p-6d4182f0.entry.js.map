{"version":3,"names":["CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","NODE_CHANGE_NONE","NODE_CHANGE_POSITION","NODE_CHANGE_CELL","MIN_READS","updateVDom","dom","heightIndex","cells","range","node","change","d","toMutate","end","offset","length","i","cell","find","n","top","push","pool","filter","type","index","visible","forEach","doRender","el","nodeRender","updateCellHeight","_a","children","Array","from","tagName","childrenNu","child","newChild","createNode","classList","add","appendChild","style","transform","remove","reads","template","getTemplate","ownerDocument","importNode","content","querySelector","getViewport","scrollTop","vierportHeight","margin","Math","max","bottom","getRange","viewport","buffer","topPos","bottomPos","min","getShouldUpdate","dirtyIndex","currentRange","findCellIndex","findIndex","c","inplaceUpdate","dst","src","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","len","item","value","height","calcHeightIndex","buf","acum","resizeBuffer","Uint32Array","newBuf","set","subarray","positionForIndex","virtualScrollCss","VirtualScroll","constructor","hostRef","this","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","itemsChanged","componentWillLoad","console","warn","async","contentEl","closest","error","scrollEl","getScrollElement","updateState","componentDidUpdate","disconnectedCallback","undefined","onResize","positionForItem","Promise","resolve","getHeightIndex","cellIndex","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readTask","readVS","bind","writeTask","writeVS","topOffset","offsetTop","offsetParent","offsetHeight","shouldUpdate","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","setTimeout","shouldEnable","enableScrollEvents","Infinity","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","renderHeader","renderFooter","render","h","Host","VirtualProxy","map","utils","vattrs","classes","class","Object","assign"],"sources":["./node_modules/@ionic/core/dist/collection/components/virtual-scroll/constants.js","./node_modules/@ionic/core/dist/collection/components/virtual-scroll/virtual-scroll-utils.js","./node_modules/@ionic/core/dist/collection/components/virtual-scroll/virtual-scroll.css?tag=ion-virtual-scroll","./node_modules/@ionic/core/dist/collection/components/virtual-scroll/virtual-scroll.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const CELL_TYPE_ITEM = 'item';\nexport const CELL_TYPE_HEADER = 'header';\nexport const CELL_TYPE_FOOTER = 'footer';\nexport const NODE_CHANGE_NONE = 0;\nexport const NODE_CHANGE_POSITION = 1;\nexport const NODE_CHANGE_CELL = 2;\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { CELL_TYPE_FOOTER, CELL_TYPE_HEADER, CELL_TYPE_ITEM, NODE_CHANGE_CELL, NODE_CHANGE_NONE, NODE_CHANGE_POSITION, } from './constants';\nconst MIN_READS = 2;\nexport const updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find((n) => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter((n) => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find((n) => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter((n) => n.d && n.top !== -9999)\n    .forEach((n) => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nexport const doRender = (el, nodeRender, dom, updateCellHeight) => {\n  var _a;\n  const children = Array.from(el.children).filter((n) => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = (_a = nodeRender(newChild, cell, i)) !== null && _a !== void 0 ? _a : newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument !== null) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM:\n      return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER:\n      return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER:\n      return el.querySelector('template[name=footer]');\n  }\n};\nexport const getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin,\n  };\n};\nexport const getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nexport const getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return dirtyIndex <= end || currentRange.offset !== range.offset || currentRange.length !== range.length;\n};\nexport const findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex((c) => c.index === index);\n  }\n};\nexport const inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nexport const calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nexport const calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nexport const resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nexport const positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find((c) => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n","ion-virtual-scroll {\n  display: block;\n  position: relative;\n  width: 100%;\n  contain: strict;\n  user-select: none;\n}\n\nion-virtual-scroll > .virtual-loading {\n  opacity: 0;\n}\n\nion-virtual-scroll > .virtual-item {\n  /* stylelint-disable declaration-no-important, property-disallowed-list */\n  position: absolute !important;\n  top: 0 !important;\n  right: 0 !important;\n  left: 0 !important;\n  transition-duration: 0ms;\n  will-change: transform;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, forceUpdate, h, readTask, writeTask, } from '@stencil/core';\nimport { componentOnReady } from '../../utils/helpers';\nimport { CELL_TYPE_FOOTER, CELL_TYPE_HEADER, CELL_TYPE_ITEM } from './constants';\nimport { calcCells, calcHeightIndex, doRender, findCellIndex, getRange, getShouldUpdate, getViewport, inplaceUpdate, positionForIndex, resizeBuffer, updateVDom, } from './virtual-scroll-utils';\n// TODO(FW-2832): types\nexport class VirtualScroll {\n  constructor() {\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  componentWillLoad() {\n    console.warn(`[Deprecation Warning]: ion-virtual-scroll has been deprecated and will be removed in Ionic Framework v7.0. See https://ionicframework.com/docs/angular/virtual-scroll for migration steps.`);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifying by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = len === -1 ? this.items.length - offset : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node !== null && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node) {\n      componentOnReady(node, update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl && this.cells.length > 0);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM:\n        return this.renderItem(value, index);\n      case CELL_TYPE_HEADER:\n        return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER:\n        return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`,\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map((node) => this.renderVirtualNode(node))))));\n  }\n  static get is() { return \"ion-virtual-scroll\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"virtual-scroll.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"virtual-scroll.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"approxItemHeight\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"It is important to provide this\\nif virtual item height will be significantly larger than the default\\nThe approximate height of each virtual item template's cell.\\nThis dimension is used to help determine how many cells should\\nbe created when initialized, and to help calculate the height of\\nthe scrollable area. This height value can only use `px` units.\\nNote that the actual rendered size of each cell comes from the\\napp's CSS, whereas this approximation is used to help calculate\\ninitial dimensions before the item has been rendered.\"\n        },\n        \"attribute\": \"approx-item-height\",\n        \"reflect\": false,\n        \"defaultValue\": \"45\"\n      },\n      \"approxHeaderHeight\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The approximate height of each header template's cell.\\nThis dimension is used to help determine how many cells should\\nbe created when initialized, and to help calculate the height of\\nthe scrollable area. This height value can only use `px` units.\\nNote that the actual rendered size of each cell comes from the\\napp's CSS, whereas this approximation is used to help calculate\\ninitial dimensions before the item has been rendered.\"\n        },\n        \"attribute\": \"approx-header-height\",\n        \"reflect\": false,\n        \"defaultValue\": \"30\"\n      },\n      \"approxFooterHeight\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The approximate width of each footer template's cell.\\nThis dimension is used to help determine how many cells should\\nbe created when initialized, and to help calculate the height of\\nthe scrollable area. This height value can only use `px` units.\\nNote that the actual rendered size of each cell comes from the\\napp's CSS, whereas this approximation is used to help calculate\\ninitial dimensions before the item has been rendered.\"\n        },\n        \"attribute\": \"approx-footer-height\",\n        \"reflect\": false,\n        \"defaultValue\": \"30\"\n      },\n      \"headerFn\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"HeaderFn\",\n          \"resolved\": \"((item: any, index: number, items: any[]) => string | null | undefined) | undefined\",\n          \"references\": {\n            \"HeaderFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Section headers and the data used within its given\\ntemplate can be dynamically created by passing a function to `headerFn`.\\nFor example, a large list of contacts usually has dividers between each\\nletter in the alphabet. App's can provide their own custom `headerFn`\\nwhich is called with each record within the dataset. The logic within\\nthe header function can decide if the header template should be used,\\nand what data to give to the header template. The function must return\\n`null` if a header cell shouldn't be created.\"\n        }\n      },\n      \"footerFn\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"HeaderFn\",\n          \"resolved\": \"((item: any, index: number, items: any[]) => string | null | undefined) | undefined\",\n          \"references\": {\n            \"HeaderFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Section footers and the data used within its given\\ntemplate can be dynamically created by passing a function to `footerFn`.\\nThe logic within the footer function can decide if the footer template\\nshould be used, and what data to give to the footer template. The function\\nmust return `null` if a footer cell shouldn't be created.\"\n        }\n      },\n      \"items\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"any[]\",\n          \"resolved\": \"any[] | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The data that builds the templates within the virtual scroll.\\nIt's important to note that when this data has changed, then the\\nentire virtual scroll is reset, which is an expensive operation and\\nshould be avoided if possible.\"\n        }\n      },\n      \"itemHeight\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ItemHeightFn\",\n          \"resolved\": \"((item: any, index: number) => number) | undefined\",\n          \"references\": {\n            \"ItemHeightFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An optional function that maps each item within their height.\\nWhen this function is provides, heavy optimizations and fast path can be taked by\\n`ion-virtual-scroll` leading to massive performance improvements.\\n\\nThis function allows to skip all DOM reads, which can be Doing so leads\\nto massive performance\"\n        }\n      },\n      \"headerHeight\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"HeaderHeightFn\",\n          \"resolved\": \"((item: any, index: number) => number) | undefined\",\n          \"references\": {\n            \"HeaderHeightFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An optional function that maps each item header within their height.\"\n        }\n      },\n      \"footerHeight\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"FooterHeightFn\",\n          \"resolved\": \"((item: any, index: number) => number) | undefined\",\n          \"references\": {\n            \"FooterHeightFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An optional function that maps each item footer within their height.\"\n        }\n      },\n      \"renderItem\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"(item: any, index: number) => any\",\n          \"resolved\": \"((item: any, index: number) => any) | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"NOTE: only JSX API for stencil.\\n\\nProvide a render function for the items to be rendered. Returns a JSX virtual-dom.\"\n        }\n      },\n      \"renderHeader\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"(item: any, index: number) => any\",\n          \"resolved\": \"((item: any, index: number) => any) | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"NOTE: only JSX API for stencil.\\n\\nProvide a render function for the header to be rendered. Returns a JSX virtual-dom.\"\n        }\n      },\n      \"renderFooter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"(item: any, index: number) => any\",\n          \"resolved\": \"((item: any, index: number) => any) | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"NOTE: only JSX API for stencil.\\n\\nProvide a render function for the footer to be rendered. Returns a JSX virtual-dom.\"\n        }\n      },\n      \"nodeRender\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ItemRenderFn\",\n          \"resolved\": \"((el: HTMLElement | null, cell: Cell, domIndex: number) => HTMLElement) | undefined\",\n          \"references\": {\n            \"ItemRenderFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"NOTE: only Vanilla JS API.\"\n        }\n      },\n      \"domRender\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"DomRenderFn\",\n          \"resolved\": \"((dom: VirtualNode[]) => void) | undefined\",\n          \"references\": {\n            \"DomRenderFn\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        }\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"totalHeight\": {}\n    };\n  }\n  static get methods() {\n    return {\n      \"positionForItem\": {\n        \"complexType\": {\n          \"signature\": \"(index: number) => Promise<number>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<number>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns the position of the virtual item at the given index.\",\n          \"tags\": []\n        }\n      },\n      \"checkRange\": {\n        \"complexType\": {\n          \"signature\": \"(offset: number, len?: number) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\\ndirty any time the content or their style changes.\\n\\nThe subset of items to be updated can are specifying by an offset and a length.\",\n          \"tags\": []\n        }\n      },\n      \"checkEnd\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"This method marks the tail the items array as dirty, so they can be re-rendered.\\n\\nIt's equivalent to calling:\\n\\n```js\\nvirtualScroll.checkRange(lastItemLen);\\n```\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"itemHeight\",\n        \"methodName\": \"itemsChanged\"\n      }, {\n        \"propName\": \"headerHeight\",\n        \"methodName\": \"itemsChanged\"\n      }, {\n        \"propName\": \"footerHeight\",\n        \"methodName\": \"itemsChanged\"\n      }, {\n        \"propName\": \"items\",\n        \"methodName\": \"itemsChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"resize\",\n        \"method\": \"onResize\",\n        \"target\": \"window\",\n        \"capture\": false,\n        \"passive\": true\n      }];\n  }\n}\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\n"],"mappings":"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"}